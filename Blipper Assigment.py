# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZyXi7Ft2bBJt5wy0CqZxLVOu8g-Hj579
"""

from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score
import pandas as pd
import librosa
import numpy as np
import os, glob

observed_emotions=['calm', 'happy', 'fearful', 'disgust']

def load_data(test_size=0.2):
    x, y = [], []
    for file in glob.glob("//content/drive/MyDrive/speech-emotion-recognition-ravdess-data/Actor_*/*.wav"):
        file_name = os.path.basename(file)
        emotion = emotions[file_name.split("-")[2]]
        if emotion not in observed_emotions:
            continue
        feature = extract_feature(file, mfcc=True, chroma=True, mel=True)
        x.append(feature)
        y.append(emotion)
    return train_test_split(np.array(x), y, test_size=test_size, random_state=9)

def extract_feature(file_name, mfcc=True, chroma=True, mel=True):
    X, sample_rate = librosa.load(file_name)
    result = np.array([])

    if mfcc:
        mfccs = np.mean(librosa.feature.mfcc(y=X, sr=sample_rate, n_mfcc=13).T, axis=0)
        result = np.hstack((result, mfccs))
    if chroma:
        chroma = np.mean(librosa.feature.chroma_stft(y=X, sr=sample_rate).T, axis=0)
        result = np.hstack((result, chroma))
    if mel:
        mel = np.mean(librosa.feature.melspectrogram(y=X, sr=sample_rate).T, axis=0)
        result = np.hstack((result, mel))

    return result

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = load_data(test_size=0.25)

model = MLPClassifier(alpha=0.01, batch_size=256, epsilon=1e-08, hidden_layer_sizes=(300,), max_iter=500)

model.fit(x_train, y_train)

y_pred = model.predict(x_test)

accuracy = accuracy_score(y_true=y_test, y_pred=y_pred)
print("Accuracy: {:.2f}%".format(accuracy * 100))

# Define your emotion mapping (no need for numerical labels)
emotion_mapping = {'calm': 'calm', 'happy': 'happy', 'fearful': 'fearful', 'disgust': 'disgust'}

# Map the predicted emotions using emotion_mapping
predicted_emotions = [emotion_mapping[pred] for pred in y_pred]

# Create a DataFrame to display the actual and predicted emotions for the first 20 examples in the test set
df = pd.DataFrame({'Actual': y_test, 'Predicted': predicted_emotions})
df.head(20)

import pickle
with open('trained_model.pkl', 'wb') as model_file:
    pickle.dump(model, model_file)

